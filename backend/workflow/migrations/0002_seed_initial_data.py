# Generated by Django 5.2.1 on 2025-05-10 19:04

from django.db import migrations

INITIAL_TRIGGERS = [
    {"name": "Guest checks in", "description": "Fires when a guest checks into the property."},
    {"name": "Guest checks out", "description": "Fires when a guest checks out from the property."},
    {"name": "Cleaning completed", "description": "Fires when the cleaning for a unit is marked as completed."},
    {"name": "Maintenance issue reported", "description": "Fires when a new maintenance issue is reported for a property."},
    {"name": "Booking canceled", "description": "Fires when a booking is canceled."},
    {"name": "Inventory running low", "description": "Fires when a tracked inventory item is below a certain threshold."},
    {"name": "Guest Sends Message", "description": "Fires when a guest sends a new message."},
    {"name": "New Booking Confirmed", "description": "Fires when a new booking is confirmed."},
    {"name": "Smart Device Alert", "description": "Fires when a connected smart device triggers an alert (e.g., noise, smoke, lock)."}
]

INITIAL_ACTIONS = [
    {"name": "Send Email", "description": "Sends an email to a specified recipient."},
    {"name": "Send Slack Notification", "description": "Sends a message to a specified Slack channel or user."},
    {"name": "Send Native Notification", "description": "Sends a push notification to a mobile or web application."},
    {"name": "Create Task", "description": "Creates a new task in a task management system."},
    {"name": "Turn Device On/Off", "description": "Turns a smart home device on or off."}
]

def forwards_func(apps, schema_editor):
    Trigger = apps.get_model('workflow', 'Trigger')
    Action = apps.get_model('workflow', 'Action')
    db_alias = schema_editor.connection.alias

    for trigger_data in INITIAL_TRIGGERS:
        Trigger.objects.using(db_alias).update_or_create(
            name=trigger_data["name"],
            defaults={'description': trigger_data["description"]}
        )

    for action_data in INITIAL_ACTIONS:
        Action.objects.using(db_alias).update_or_create(
            name=action_data["name"],
            defaults={'description': action_data["description"]}
        )

def backwards_func(apps, schema_editor):
    Trigger = apps.get_model('workflow', 'Trigger')
    Action = apps.get_model('workflow', 'Action')
    db_alias = schema_editor.connection.alias

    trigger_names_to_delete = [t["name"] for t in INITIAL_TRIGGERS]
    Trigger.objects.using(db_alias).filter(name__in=trigger_names_to_delete).delete()

    action_names_to_delete = [a["name"] for a in INITIAL_ACTIONS]
    Action.objects.using(db_alias).filter(name__in=action_names_to_delete).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('workflow', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(forwards_func, backwards_func),
    ]
